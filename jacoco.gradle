apply plugin: 'jacoco'

//Java源码路径列表
def coverageSourceDirs = [
        './src/main/java'
]

//Jacoco 版本
jacoco {
    toolVersion = "0.7.9"
}

def jacocoPartsDir = "$buildDir/outputs/jacoco-parts/"
def jacocoAllDir = "$buildDir/outputs/jacoco-all/"
def jacocoAllFileName = "all.ec"
def classPath = "$buildDir/intermediates/javac/debug/classes/"


task jacocoClean() {
    group = "JacocoReport"
    File file = new File(jacocoAllDir + jacocoAllFileName)
    doFirst {
        if (file.exists()) {
            file.delete()
        }
    }
}

task jacocoMerger(type: JacocoMerge) {
    group = "JacocoReport"
    destinationFile = new File(jacocoAllDir + jacocoAllFileName)
    executionData = project.files([])
    doFirst {
        File jacocoExecDir = new File(jacocoPartsDir)

        if (jacocoExecDir.exists()) {
            executionData jacocoExecDir.listFiles().findAll { it.name.endsWith(".ec") }
        }
    }
}

//生成报告task
task jacocoBuild(type: JacocoReport, dependsOn: ['jacocoClean', 'jacocoMerger']) {
    group = "JacocoReport"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def excludes = ['**/R*.class',
                    '**/*$InjectAdapter.class',
                    '**/*$ModuleAdapter.class',
                    '**/*$ViewInjector*.class'
    ]

    def javaClasses = fileTree(dir: './build/intermediates/javac/release/classes/', excludes: excludes)
    def kotlinClasses = fileTree(dir: './build/tmp/kotlin-classes/release/', excludes: excludes)
    getClassDirectories().from([javaClasses, kotlinClasses])
    getSourceDirectories().from(files(coverageSourceDirs))
    getExecutionData().from(files(jacocoAllDir + jacocoAllFileName))

    doFirst {
        new File("$classPath").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

task diffCoverReport() {
    group = "JacocoReport"
    def jacocoXML = "$buildDir/reports/jacoco/jacocoBuild/jacocoBuild.xml"
    def diffReport = "$buildDir/reports/jacoco/jacocoBuild/diff-report.html"
    def srcRoot = "$projectDir/src/main/java/ $projectDir/src/main/kotlin/"

    def diffCover = "diff-cover $jacocoXML --html-report $diffReport --src-roots $srcRoot"
    Process diffCoverProcess = diffCover.execute()
    println "Success execute Command: ${diffCover.toString().readLines()}"
    diffCoverProcess.in.eachLine { processing ->
        println processing
    }
}

task jacocoInit() {
    group = "JacocoReport"
    doFirst {
        File file = new File(jacocoPartsDir)
        if (!file.exists()) {
            file.mkdir()
        }

        file = new File(jacocoAllDir)
        if (!file.exists()) {
            file.mkdir()
        }
    }
}