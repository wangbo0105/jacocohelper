apply plugin: 'jacoco'

//Java源码路径列表
def coverageSourceDirs = [
        '../NewTravelGuide_main/src/main/java'
]

//Jacoco 版本
jacoco {
    toolVersion = "0.7.9"
}

def jacocoPartsDir = "$buildDir/outputs/jacoco-parts/"
def jacocoAllDir = "$buildDir/outputs/jacoco-all/"
def jacocoAllFileName = "all.ec"


task jacocoClean() {
    group = "JacocoReport"
    File file = new File(jacocoAllDir + jacocoAllFileName)
    doFirst {
        if (file.exists()) {
            file.delete()
        }
    }
}

task jacocoMerger(type:JacocoMerge) {
    group = "JacocoReport"
    destinationFile = new File(jacocoAllDir + jacocoAllFileName)
    executionData = project.files([])
    doFirst {
        File jacocoExecDir = new File(jacocoPartsDir)

        if (jacocoExecDir.exists()) {
            executionData jacocoExecDir.listFiles().findAll { it.name.endsWith(".ec") }
        }
    }
}

//生成报告task
task jacocoBuild(type: JacocoReport, dependsOn: ['jacocoClean', 'jacocoMerger']) {
    group = "JacocoReport"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: './build/intermediates/javac/devDebug/classes/',
            excludes: ['**/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
    sourceDirectories = files(coverageSourceDirs)
    executionData = files(jacocoAllDir + jacocoAllFileName)

    doFirst {
        new File("$buildDir/intermediates/javac/devDebug/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

task jacocoInit(){
    group = "JacocoReport"
    doFirst{
        File file = new File(jacocoPartsDir)
        if (!file.exists()){
            file.mkdir()
        }

        file = new File(jacocoAllDir)
        if (!file.exists()){
            file.mkdir()
        }
    }
}